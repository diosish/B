class APIClient {
    constructor() {
        this.baseURL = '';
        this.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.maxRetries = 3;
        this.retryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    getAuthHeaders() {
        const headers = {
            'Content-Type': 'application/json',
        };

        const tg = window.Telegram?.WebApp;
        if (tg && tg.initData) {
            headers['Authorization'] = tg.initData;
        } else {
            headers['Authorization'] = 'test_data';
        }

        return headers;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
     */
    async makeRequest(url, options = {}, retryCount = 0) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), this.timeout);

            const response = await fetch(url, {
                ...options,
                headers: {
                    ...this.getAuthHeaders(),
                    ...options.headers,
                },
                signal: controller.signal,
            });

            clearTimeout(timeoutId);

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            console.log(`üåê ${options.method || 'GET'} ${url} -> ${response.status}`);

            if (!response.ok) {
                const errorData = await this.parseErrorResponse(response);
                throw new APIError(errorData.message, response.status, errorData);
            }

            return response;
        } catch (error) {
            if (error.name === 'AbortError') {
                throw new APIError('Request timeout', 408);
            }

            // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if (retryCount < this.maxRetries && this.shouldRetry(error)) {
                console.warn(`üîÑ Retrying request (${retryCount + 1}/${this.maxRetries}): ${url}`);
                await this.delay(this.retryDelay * (retryCount + 1));
                return this.makeRequest(url, options, retryCount + 1);
            }

            throw error;
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
     */
    async parseErrorResponse(response) {
        try {
            const errorData = await response.json();
            return {
                message: errorData.detail || `HTTP ${response.status}`,
                details: errorData,
            };
        } catch {
            return {
                message: `HTTP ${response.status}: ${response.statusText}`,
                details: null,
            };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    shouldRetry(error) {
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö 5xx
        return (
            error instanceof TypeError || // –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
            (error instanceof APIError && error.status >= 500)
        );
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * GET –∑–∞–ø—Ä–æ—Å
     */
    async get(url) {
        const response = await this.makeRequest(url, { method: 'GET' });
        return response.json();
    }

    /**
     * POST –∑–∞–ø—Ä–æ—Å
     */
    async post(url, data) {
        const response = await this.makeRequest(url, {
            method: 'POST',
            body: JSON.stringify(data),
        });
        return response.json();
    }

    /**
     * PUT –∑–∞–ø—Ä–æ—Å
     */
    async put(url, data) {
        const response = await this.makeRequest(url, {
            method: 'PUT',
            body: JSON.stringify(data),
        });
        return response.json();
    }

    /**
     * DELETE –∑–∞–ø—Ä–æ—Å
     */
    async delete(url) {
        const response = await this.makeRequest(url, { method: 'DELETE' });
        return response.json();
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è API –æ—à–∏–±–æ–∫
class APIError extends Error {
    constructor(message, status, details = null) {
        super(message);
        this.name = 'APIError';
        this.status = status;
        this.details = details;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    getUserMessage() {
        switch (this.status) {
            case 400:
                return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.';
            case 401:
                return '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.';
            case 403:
                return '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.';
            case 404:
                return '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
            case 408:
                return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.';
            case 409:
                return '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
            case 429:
                return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.';
            case 500:
                return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.';
            case 503:
                return '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            default:
                return this.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.';
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
window.apiClient = new APIClient();