// app/static/js/navigation.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

class NavigationManager {
    constructor() {
        this.currentPage = null;
        this.userRole = null;
        this.history = [];
        this.navigationMaps = {
            volunteer: [
                { id: 'profile', icon: 'üë§', label: '–ü—Ä–æ—Ñ–∏–ª—å', url: '/volunteer/profile' },
                { id: 'events', icon: 'üìÖ', label: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', url: '/volunteer/events' },
                { id: 'applications', icon: 'üìã', label: '–ó–∞—è–≤–∫–∏', url: '/volunteer/applications' },
                { id: 'reviews', icon: '‚≠ê', label: '–û—Ç–∑—ã–≤—ã', url: '/volunteer/reviews' }
            ],
            organizer: [
                { id: 'profile', icon: 'üë§', label: '–ü—Ä–æ—Ñ–∏–ª—å', url: '/organizer/profile' },
                { id: 'create', icon: '‚ûï', label: '–°–æ–∑–¥–∞—Ç—å', url: '/organizer/create-event' },
                { id: 'events', icon: 'üìã', label: '–°–æ–±—ã—Ç–∏—è', url: '/organizer/events' },
                { id: 'stats', icon: 'üìä', label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', url: '/organizer/stats' }
            ]
        };
    }

    init(userRole) {
        this.userRole = userRole;
        this.currentPage = this.getCurrentPageId();
        this.render();
        this.setupEventListeners();
    }

    getCurrentPageId() {
        const path = window.location.pathname;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL
        if (path.includes('/profile')) return 'profile';
        if (path.includes('/events')) return 'events';
        if (path.includes('/applications')) return 'applications';
        if (path.includes('/reviews')) return 'reviews';
        if (path.includes('/create')) return 'create';
        if (path.includes('/stats')) return 'stats';
        
        return null;
    }

    render() {
        const existingNav = document.querySelector('.bottom-nav');
        if (existingNav) {
            existingNav.remove();
        }

        if (!this.userRole || !this.navigationMaps[this.userRole]) {
            return;
        }

        const navItems = this.navigationMaps[this.userRole];
        const navHTML = this.createNavigationHTML(navItems);
        
        document.body.insertAdjacentHTML('beforeend', navHTML);
        this.attachClickListeners();
    }

    createNavigationHTML(navItems) {
        return `
            <nav class="bottom-nav">
                ${navItems.map(item => `
                    <a href="${item.url}" 
                       class="nav-item ${item.id === this.currentPage ? 'active' : ''}" 
                       data-page="${item.id}">
                        <span class="nav-icon">${item.icon}</span>
                        <span class="nav-label">${item.label}</span>
                    </a>
                `).join('')}
            </nav>
        `;
    }

    attachClickListeners() {
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const url = item.getAttribute('href');
                const pageId = item.getAttribute('data-page');
                this.navigateTo(url, pageId);
            });
        });
    }

    navigateTo(url, pageId) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (this.currentPage) {
            this.history.push({
                url: window.location.pathname,
                pageId: this.currentPage,
                timestamp: Date.now()
            });
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.showLoadingIndicator();

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.href = url;
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('popstate', (e) => {
            const newPageId = this.getCurrentPageId();
            this.updateActiveNavItem(newPageId);
            this.currentPage = newPageId;
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ—Å—Ç–æ–≤ —Å–≤–∞–π–ø–∞ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è)
        this.setupSwipeGestures();
    }

    setupSwipeGestures() {
        let startX = 0;
        let startY = 0;
        let endX = 0;
        let endY = 0;

        document.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;
        });

        document.addEventListener('touchend', (e) => {
            endX = e.changedTouches[0].clientX;
            endY = e.changedTouches[0].clientY;
            this.handleSwipe();
        });
    }

    handleSwipe() {
        const deltaX = endX - startX;
        const deltaY = endY - startY;
        const minSwipeDistance = 100;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > minSwipeDistance) {
            if (deltaX > 0) {
                this.navigateToPrevious();
            } else {
                this.navigateToNext();
            }
        }
    }

    navigateToPrevious() {
        const navItems = this.navigationMaps[this.userRole];
        const currentIndex = navItems.findIndex(item => item.id === this.currentPage);
        
        if (currentIndex > 0) {
            const prevItem = navItems[currentIndex - 1];
            this.navigateTo(prevItem.url, prevItem.id);
        }
    }

    navigateToNext() {
        const navItems = this.navigationMaps[this.userRole];
        const currentIndex = navItems.findIndex(item => item.id === this.currentPage);
        
        if (currentIndex < navItems.length - 1) {
            const nextItem = navItems[currentIndex + 1];
            this.navigateTo(nextItem.url, nextItem.id);
        }
    }

    updateActiveNavItem(pageId) {
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            if (item.getAttribute('data-page') === pageId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
    }

    showLoadingIndicator() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const loader = document.createElement('div');
        loader.className = 'page-transition-loader';
        loader.innerHTML = '<div class="loading-spinner"></div>';
        loader.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 9998;
            background: var(--tg-theme-bg-color);
            padding: var(--spacing-lg);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
        `;
        
        document.body.appendChild(loader);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è)
        setTimeout(() => {
            if (loader.parentNode) {
                loader.parentNode.removeChild(loader);
            }
        }, 3000);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    goToProfile() {
        const profileUrl = this.userRole === 'volunteer' ? '/volunteer/profile' : '/organizer/profile';
        this.navigateTo(profileUrl, 'profile');
    }

    goToEvents() {
        const eventsUrl = this.userRole === 'volunteer' ? '/volunteer/events' : '/organizer/events';
        this.navigateTo(eventsUrl, 'events');
    }

    goHome() {
        this.navigateTo('/', 'home');
    }

    goBack() {
        if (this.history.length > 0) {
            const lastPage = this.history.pop();
            window.location.href = lastPage.url;
        } else {
            this.goHome();
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    canGoBack() {
        return this.history.length > 0;
    }

    getCurrentPageInfo() {
        if (!this.userRole || !this.currentPage) return null;
        
        const navItems = this.navigationMaps[this.userRole];
        return navItems.find(item => item.id === this.currentPage);
    }

    getNavigationStats() {
        return {
            currentPage: this.currentPage,
            userRole: this.userRole,
            historyLength: this.history.length,
            canGoBack: this.canGoBack()
        };
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
class QuickActions {
    constructor(navigationManager) {
        this.nav = navigationManager;
    }

    // –î–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
    applyToRandomEvent() {
        this.nav.navigateTo('/volunteer/events?action=random', 'events');
    }

    checkApplications() {
        this.nav.navigateTo('/volunteer/applications?filter=pending', 'applications');
    }

    viewMyReviews() {
        this.nav.navigateTo('/volunteer/reviews', 'reviews');
    }

    // –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
    createQuickEvent() {
        this.nav.navigateTo('/organizer/create-event?quick=true', 'create');
    }

    checkPendingApplications() {
        this.nav.navigateTo('/organizer/events?filter=pending', 'events');
    }

    viewEventStats() {
        this.nav.navigateTo('/organizer/stats', 'stats');
    }

    // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    emergencyContact() {
        const tg = window.Telegram?.WebApp;
        if (tg?.showAlert) {
            tg.showAlert('üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å:\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @volunteer_support_bot');
        }
    }

    shareApp() {
        const tg = window.Telegram?.WebApp;
        const shareText = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤! –ù–∞–π–¥–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –¥–ª—è —Å–≤–æ–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.';
        
        if (tg?.sendData) {
            tg.sendData(JSON.stringify({
                action: 'share',
                text: shareText,
                url: window.location.origin
            }));
        } else if (navigator.share) {
            navigator.share({
                title: '–°–∏—Å—Ç–µ–º–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤',
                text: shareText,
                url: window.location.origin
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener('app:ready', () => {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    window.navigation = new NavigationManager();
    window.quickActions = new QuickActions(window.navigation);
    
    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.nav = window.navigation;
    
    console.log('üß≠ Navigation system initialized');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { NavigationManager, QuickActions };
}