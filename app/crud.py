# app/crud.py - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import and_, func, desc
from . import models, schemas
from typing import List, Optional
from datetime import datetime, timedelta


def get_user_by_telegram_id(db: Session, telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üîç Looking for user with telegram_id: {telegram_id}")
    user = db.query(models.User).filter(models.User.telegram_id == telegram_id).first()
    if user:
        print(f"‚úÖ User found: ID={user.id}, Role={user.role}")
    else:
        print(f"‚ùå User not found for telegram_id: {telegram_id}")
    return user


def create_user(db: Session, user: schemas.UserCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    try:
        print(f"üìù Creating user with telegram_id={user.telegram_id}, role={user.role}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_user = get_user_by_telegram_id(db, user.telegram_id)
        if existing_user:
            raise ValueError(f"User with telegram_id {user.telegram_id} already exists")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = models.User(
            telegram_id=user.telegram_id,
            full_name=user.full_name,
            city=user.city,
            role=user.role,
            volunteer_type=user.volunteer_type,
            skills=user.skills,
            org_type=user.org_type,
            org_name=user.org_name,
            inn=user.inn,
            description=user.description,
            rating=0.0 if user.role == "volunteer" else None
        )

        db.add(db_user)
        db.commit()
        db.refresh(db_user)

        print(f"‚úÖ User created successfully: ID={db_user.id}")
        return db_user

    except Exception as e:
        print(f"‚ùå Error creating user: {str(e)}")
        db.rollback()
        raise


def get_events(db: Session, skip: int = 0, limit: int = 100, city: Optional[str] = None,
               status: Optional[str] = None, organizer_id: Optional[int] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    query = db.query(models.Event).options(joinedload(models.Event.organizer))

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if city:
        query = query.filter(models.Event.city.ilike(f"%{city}%"))

    if status:
        query = query.filter(models.Event.status == status)

    if organizer_id:
        query = query.filter(models.Event.organizer_id == organizer_id)

    return query.order_by(desc(models.Event.created_at)).offset(skip).limit(limit).all()


def create_event(db: Session, event: schemas.EventCreate, organizer_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        organizer = get_user_by_id(db, organizer_id)
        if not organizer:
            raise ValueError(f"Organizer with ID {organizer_id} not found")

        if organizer.role != "organizer":
            raise ValueError(f"User {organizer_id} is not an organizer")

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        db_event = models.Event(
            title=event.title,
            description=event.description,
            city=event.city,
            date=event.date,
            duration=event.duration,
            payment=event.payment,
            work_type=event.work_type,
            organizer_id=organizer_id
        )

        db.add(db_event)
        db.commit()
        db.refresh(db_event)

        print(f"‚úÖ Event created: ID={db_event.id}, Title='{db_event.title}'")
        return db_event

    except Exception as e:
        print(f"‚ùå Error creating event: {str(e)}")
        db.rollback()
        raise


def create_application(db: Session, application: schemas.ApplicationCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event = get_event_by_id(db, application.event_id)
        if not event:
            raise ValueError(f"Event with ID {application.event_id} not found")

        if event.status != "active":
            raise ValueError(f"Cannot apply to event with status '{event.status}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
        volunteer = get_user_by_id(db, application.volunteer_id)
        if not volunteer:
            raise ValueError(f"Volunteer with ID {application.volunteer_id} not found")

        if volunteer.role != "volunteer":
            raise ValueError(f"User {application.volunteer_id} is not a volunteer")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä –Ω–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        existing_app = db.query(models.Application).filter(
            and_(
                models.Application.event_id == application.event_id,
                models.Application.volunteer_id == application.volunteer_id
            )
        ).first()

        if existing_app:
            raise ValueError("Application already exists for this event and volunteer")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥—Ä—É–≥–∏–º–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏
        if event.date:
            time_conflicts = check_time_conflicts(db, application.volunteer_id, event.date, event.duration or 8)
            if time_conflicts:
                raise ValueError("Time conflict with another approved event")

        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        db_application = models.Application(
            event_id=application.event_id,
            volunteer_id=application.volunteer_id
        )

        db.add(db_application)
        db.commit()
        db.refresh(db_application)

        print(f"‚úÖ Application created: ID={db_application.id}")
        return db_application

    except Exception as e:
        print(f"‚ùå Error creating application: {str(e)}")
        db.rollback()
        raise


def check_time_conflicts(db: Session, volunteer_id: int, event_date: datetime, duration: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"""
    event_end = event_date + timedelta(hours=duration)

    # –ù–∞—Ö–æ–¥–∏–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
    conflicting_applications = db.query(models.Application).join(models.Event).filter(
        and_(
            models.Application.volunteer_id == volunteer_id,
            models.Application.status == "approved",
            models.Event.date.isnot(None),
            models.Event.date >= event_date - timedelta(hours=12),  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 12 —á–∞—Å–æ–≤
            models.Event.date <= event_date + timedelta(hours=12)
        )
    ).all()

    for app in conflicting_applications:
        other_event = app.event
        if other_event.date and other_event.duration:
            other_end = other_event.date + timedelta(hours=other_event.duration)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            if (event_date < other_end and event_end > other_event.date):
                return True

    return False


def create_review(db: Session, event_id: int, volunteer_id: int, organizer_id: int, rating: int, comment: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        event = get_event_by_id(db, event_id)
        if not event:
            raise ValueError(f"Event with ID {event_id} not found")

        volunteer = get_user_by_id(db, volunteer_id)
        if not volunteer or volunteer.role != "volunteer":
            raise ValueError(f"Volunteer with ID {volunteer_id} not found")

        organizer = get_user_by_id(db, organizer_id)
        if not organizer or organizer.role != "organizer":
            raise ValueError(f"Organizer with ID {organizer_id} not found")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        if event.organizer_id != organizer_id:
            raise ValueError("Organizer can only review volunteers from their own events")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if event.status != "completed":
            raise ValueError("Can only review volunteers after event completion")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ª–æ–Ω—Ç—ë—Ä –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        application = db.query(models.Application).filter(
            and_(
                models.Application.event_id == event_id,
                models.Application.volunteer_id == volunteer_id,
                models.Application.status == "approved"
            )
        ).first()

        if not application:
            raise ValueError("Volunteer was not approved for this event")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤–∞
        existing_review = check_existing_review(db, event_id, volunteer_id, organizer_id)
        if existing_review:
            raise ValueError("Review already exists")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
        db_review = models.Review(
            event_id=event_id,
            volunteer_id=volunteer_id,
            organizer_id=organizer_id,
            rating=rating,
            comment=comment
        )

        db.add(db_review)
        db.commit()
        db.refresh(db_review)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
        update_volunteer_rating(db, volunteer_id)

        print(f"‚úÖ Review created: ID={db_review.id}")
        return db_review

    except Exception as e:
        print(f"‚ùå Error creating review: {str(e)}")
        db.rollback()
        raise


def update_volunteer_rating(db: Session, volunteer_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = db.query(func.avg(models.Review.rating)).filter(
            models.Review.volunteer_id == volunteer_id
        ).scalar()

        if avg_rating is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            volunteer = get_user_by_id(db, volunteer_id)
            if volunteer:
                volunteer.rating = round(float(avg_rating), 2)
                volunteer.updated_at = datetime.utcnow()
                db.commit()
                print(f"‚úÖ Updated rating for volunteer {volunteer_id}: {volunteer.rating}")

    except Exception as e:
        print(f"‚ùå Error updating volunteer rating: {str(e)}")
        db.rollback()
        raise


def get_reviewable_volunteers(db: Session, event_id: int, organizer_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å join'–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        reviewable_volunteers = db.query(models.Application, models.User).join(
            models.User, models.Application.volunteer_id == models.User.id
        ).outerjoin(
            models.Review,
            and_(
                models.Review.event_id == event_id,
                models.Review.volunteer_id == models.User.id,
                models.Review.organizer_id == organizer_id
            )
        ).filter(
            and_(
                models.Application.event_id == event_id,
                models.Application.status == "approved",
                models.Review.id.is_(None)  # –ù–µ—Ç –æ—Ç–∑—ã–≤–∞
            )
        ).all()

        result = []
        for application, volunteer in reviewable_volunteers:
            result.append({
                "application_id": application.id,
                "volunteer": volunteer
            })

        return result

    except Exception as e:
        print(f"‚ùå Error getting reviewable volunteers: {str(e)}")
        raise


def check_existing_review(db: Session, event_id: int, volunteer_id: int, organizer_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    return db.query(models.Review).filter(
        and_(
            models.Review.event_id == event_id,
            models.Review.volunteer_id == volunteer_id,
            models.Review.organizer_id == organizer_id
        )
    ).first()


def get_user_by_id(db: Session, user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    return db.query(models.User).filter(models.User.id == user_id).first()


def get_event_by_id(db: Session, event_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ ID —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    return db.query(models.Event).options(joinedload(models.Event.organizer)).filter(
        models.Event.id == event_id
    ).first()


def get_applications_by_volunteer(db: Session, volunteer_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""
    return db.query(models.Application).options(joinedload(models.Application.event)).filter(
        models.Application.volunteer_id == volunteer_id
    ).order_by(desc(models.Application.applied_at)).all()


def update_application_status(db: Session, application_id: int, status: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    try:
        application = db.query(models.Application).filter(models.Application.id == application_id).first()
        if not application:
            raise ValueError(f"Application {application_id} not found")

        old_status = application.status
        application.status = status
        application.updated_at = datetime.utcnow()

        db.commit()
        db.refresh(application)

        print(f"‚úÖ Application {application_id} status updated: {old_status} -> {status}")
        return application

    except Exception as e:
        print(f"‚ùå Error updating application status: {str(e)}")
        db.rollback()
        raise


def get_events_by_organizer(db: Session, organizer_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    return db.query(models.Event).filter(
        models.Event.organizer_id == organizer_id
    ).order_by(desc(models.Event.created_at)).all()


def get_volunteer_reviews(db: Session, volunteer_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    return db.query(models.Review).options(
        joinedload(models.Review.event),
        joinedload(models.Review.organizer)
    ).filter(
        models.Review.volunteer_id == volunteer_id
    ).order_by(desc(models.Review.created_at)).all()


def get_organizer_reviews(db: Session, organizer_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤, –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º"""
    return db.query(models.Review).options(
        joinedload(models.Review.event),
        joinedload(models.Review.volunteer)
    ).filter(
        models.Review.organizer_id == organizer_id
    ).order_by(desc(models.Review.created_at)).all()


def get_event_reviews(db: Session, event_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"""
    return db.query(models.Review).options(
        joinedload(models.Review.volunteer)
    ).filter(
        models.Review.event_id == event_id
    ).order_by(desc(models.Review.created_at)).all()


# –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
def get_system_stats(db: Session):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    stats = {
        "total_users": db.query(models.User).count(),
        "active_users": db.query(models.User).filter(models.User.is_active == True).count(),
        "total_volunteers": db.query(models.User).filter(models.User.role == "volunteer").count(),
        "total_organizers": db.query(models.User).filter(models.User.role == "organizer").count(),
        "total_events": db.query(models.Event).count(),
        "active_events": db.query(models.Event).filter(models.Event.status == "active").count(),
        "completed_events": db.query(models.Event).filter(models.Event.status == "completed").count(),
        "total_applications": db.query(models.Application).count(),
        "pending_applications": db.query(models.Application).filter(models.Application.status == "pending").count(),
        "approved_applications": db.query(models.Application).filter(models.Application.status == "approved").count(),
        "total_reviews": db.query(models.Review).count(),
        "average_rating": db.query(func.avg(models.Review.rating)).scalar() or 0,
    }

    return stats