# ===== telegram_bot.py (–Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞) =====
import asyncio
import httpx
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")


class TelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}"

    async def send_message(self, chat_id: int, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        async with httpx.AsyncClient() as client:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            if reply_markup:
                data["reply_markup"] = reply_markup

            response = await client.post(url, json=data)
            return response.json()

    async def send_webapp_button(self, chat_id: int, text: str, webapp_url: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å WebApp"""
        keyboard = {
            "inline_keyboard": [[{
                "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "web_app": {"url": webapp_url}
            }]]
        }

        return await self.send_message(chat_id, text, keyboard)

    async def set_webhook(self, webhook_url: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        async with httpx.AsyncClient() as client:
            url = f"{self.base_url}/setWebhook"
            data = {"url": webhook_url}
            response = await client.post(url, json=data)
            return response.json()

    async def get_updates(self, offset=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–¥–ª—è polling)"""
        async with httpx.AsyncClient() as client:
            url = f"{self.base_url}/getUpdates"
            params = {"timeout": 10}
            if offset:
                params["offset"] = offset

            response = await client.get(url, params=params)
            return response.json()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
async def handle_start_command(chat_id: int, first_name: str = ""):
    bot = TelegramBot(BOT_TOKEN)

    welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>

–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤.

<b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä 
‚Ä¢ üè¢ –°—Ç–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
‚Ä¢ üìÖ –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ üí∞ –ü–æ–ª—É—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞ —É—á–∞—Å—Ç–∏–µ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """

    await bot.send_webapp_button(chat_id, welcome_text, WEBAPP_URL)


async def handle_volunteer_profile_command(chat_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /volunteer_profile"""
    bot = TelegramBot(BOT_TOKEN)
    await bot.send_webapp_button(chat_id, "üë• –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞", f"{WEBAPP_URL}/volunteer/profile")


async def handle_organizer_profile_command(chat_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /organizer_profile"""
    bot = TelegramBot(BOT_TOKEN)
    await bot.send_webapp_button(chat_id, "üè¢ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", f"{WEBAPP_URL}/organizer/profile")


# –ü—Ä–æ—Å—Ç–æ–π polling –±–æ—Ç
async def start_polling():
    bot = TelegramBot(BOT_TOKEN)
    offset = None

    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! WebApp URL: {WEBAPP_URL}")

    while True:
        try:
            updates = await bot.get_updates(offset)

            if updates.get("ok") and updates.get("result"):
                for update in updates["result"]:
                    offset = update["update_id"] + 1

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    if "message" in update and "text" in update["message"]:
                        message = update["message"]
                        chat_id = message["chat"]["id"]
                        text = message["text"]
                        first_name = message["from"].get("first_name", "")

                        if text.startswith("/start"):
                            await handle_start_command(chat_id, first_name)
                        elif text == "/help":
                            help_text = """
üÜò <b>–ü–æ–º–æ—â—å</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/volunteer_profile - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
/organizer_profile - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
                            """
                            await bot.send_message(chat_id, help_text)
                        elif text == "/volunteer_profile":
                            await handle_volunteer_profile_command(chat_id)
                        elif text == "/organizer_profile":
                            await handle_organizer_profile_command(chat_id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            await asyncio.sleep(5)


if __name__ == "__main__":
    asyncio.run(start_polling())

# ===== app/auth.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π) =====
import hashlib
import hmac
import json
from urllib.parse import parse_qsl, unquote
from fastapi import HTTPException, Header
from typing import Optional
import os


def verify_telegram_auth(init_data: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp"""
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ init_data
        parsed_data = dict(parse_qsl(init_data))

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ hash
        hash_value = parsed_data.pop('hash', None)
        if not hash_value:
            raise ValueError("Hash not found")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])

        # –°–æ–∑–¥–∞–Ω–∏–µ secret key
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            raise ValueError("BOT_TOKEN not set")

        secret_key = hmac.new(
            "WebAppData".encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()

        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–∂–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
        if os.getenv("ENVIRONMENT") == "development":
            print("‚ö†Ô∏è –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏")
        elif calculated_hash != hash_value:
            raise ValueError("Invalid signature")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = parsed_data.get('user')
        if not user_data:
            raise ValueError("User data not found")

        user_info = json.loads(unquote(user_data))

        return {
            'id': user_info.get('id'),
            'first_name': user_info.get('first_name', ''),
            'last_name': user_info.get('last_name', ''),
            'username': user_info.get('username', ''),
            'language_code': user_info.get('language_code', 'ru'),
            'is_premium': user_info.get('is_premium', False)
        }

    except Exception as e:
        print(f"Auth error: {e}")
        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if os.getenv("ENVIRONMENT") == "development":
            return {
                'id': 123456789,
                'first_name': 'Test',
                'last_name': 'User',
                'username': 'testuser',
                'language_code': 'ru',
                'is_premium': False
            }
        raise HTTPException(status_code=401, detail="Invalid auth data")


def get_telegram_user(authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header required")

    return verify_telegram_auth(authorization)

