# app/admin_auth.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
import os
import secrets
import hashlib
from datetime import datetime, timedelta
from typing import Optional, Dict
from fastapi import HTTPException, Request, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis)
admin_sessions: Dict[str, dict] = {}
admin_bot_tokens: Dict[str, dict] = {}

security = HTTPBearer(auto_error=False)


class AdminAuthManager:
    def __init__(self):
        self.admin_login = os.getenv("ADMIN_LOGIN", "admin")
        self.admin_password = os.getenv("ADMIN_PASSWORD", "admin123")
        self.session_duration = timedelta(hours=8)  # –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç 8 —á–∞—Å–æ–≤
        self.token_duration = timedelta(hours=2)    # –¢–æ–∫–µ–Ω –∏–∑ –±–æ—Ç–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 2 —á–∞—Å–∞

    def hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        return hashlib.sha256(password.encode()).hexdigest()

    def verify_credentials(self, login: str, password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è"""
        return (login == self.admin_login and
                self.hash_password(password) == self.hash_password(self.admin_password))

    def generate_bot_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –±–æ—Ç–∞"""
        token = secrets.token_urlsafe(32)
        expires_at = datetime.utcnow() + self.token_duration

        admin_bot_tokens[token] = {
            'created_at': datetime.utcnow(),
            'expires_at': expires_at
        }

        self.cleanup_expired_tokens()
        return token

    def validate_bot_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–æ—Ç–∞"""
        if token not in admin_bot_tokens:
            return False

        if admin_bot_tokens[token]['expires_at'] < datetime.utcnow():
            admin_bot_tokens.pop(token, None)
            return False

        return True

    def create_session(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–¥–º–∏–Ω —Å–µ—Å—Å–∏–∏"""
        session_id = secrets.token_urlsafe(32)
        expires_at = datetime.utcnow() + self.session_duration

        admin_sessions[session_id] = {
            'created_at': datetime.utcnow(),
            'expires_at': expires_at,
            'last_activity': datetime.utcnow()
        }

        self.cleanup_expired_sessions()
        return session_id

    def validate_session(self, session_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        if session_id not in admin_sessions:
            return False

        session = admin_sessions[session_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
        if session['expires_at'] < datetime.utcnow():
            self.invalidate_session(session_id)
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        session['last_activity'] = datetime.utcnow()
        return True

    def invalidate_session(self, session_id: str):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
        admin_sessions.pop(session_id, None)

    def cleanup_expired_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        now = datetime.utcnow()
        expired_sessions = [
            session_id for session_id, session_data in admin_sessions.items()
            if session_data['expires_at'] < now
        ]

        for session_id in expired_sessions:
            admin_sessions.pop(session_id, None)

    def cleanup_expired_tokens(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        now = datetime.utcnow()
        expired_tokens = [
            token for token, data in admin_bot_tokens.items()
            if data['expires_at'] < now
        ]

        for token in expired_tokens:
            admin_bot_tokens.pop(token, None)

    def extend_session(self, session_id: str):
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if session_id in admin_sessions:
            admin_sessions[session_id]['expires_at'] = datetime.utcnow() + self.session_duration

    def is_admin_user(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        admin_ids_str = os.getenv("ADMIN_TELEGRAM_IDS", "123456789")
        admin_ids = [int(id_str.strip()) for id_str in admin_ids_str.split(",") if id_str.strip()]
        return telegram_id in admin_ids


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
admin_auth = AdminAuthManager()


def get_session_from_request(request: Request) -> Optional[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ session_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    auth_header = request.headers.get("Authorization")
    if auth_header and auth_header.startswith("Bearer "):
        return auth_header.split(" ")[1]

    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º cookies
    return request.cookies.get("admin_session")


def require_admin_auth(request: Request) -> dict:
    """Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    session_id = get_session_from_request(request)

    if not session_id:
        raise HTTPException(
            status_code=401,
            detail="Admin authentication required",
            headers={"WWW-Authenticate": "Bearer"}
        )

    if not admin_auth.validate_session(session_id):
        raise HTTPException(
            status_code=401,
            detail="Invalid or expired admin session",
            headers={"WWW-Authenticate": "Bearer"}
        )

    # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    admin_auth.extend_session(session_id)

    return {"session_id": session_id, "role": "admin"}


def optional_admin_auth(request: Request) -> Optional[dict]:
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    try:
        return require_admin_auth(request)
    except HTTPException:
        return None


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
class AdminActivityMiddleware:
    def __init__(self, app):
        self.app = app

    async def __call__(self, scope, receive, send):
        if scope["type"] == "http":
            request = Request(scope, receive)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if request.url.path.startswith("/admin"):
                session_id = get_session_from_request(request)
                if session_id and admin_auth.validate_session(session_id):
                    print(f"üîê Admin activity: {request.method} {request.url.path}")

        await self.app(scope, receive, send)


def get_admin_stats() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω —Å–µ—Å—Å–∏–π"""
    active_sessions = len([
        s for s in admin_sessions.values()
        if s['expires_at'] > datetime.utcnow()
    ])

    return {
        "active_sessions": active_sessions,
        "total_sessions": len(admin_sessions),
        "active_tokens": len(admin_bot_tokens),
        "last_cleanup": datetime.utcnow().isoformat()
    }