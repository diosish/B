# app/main.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
from fastapi import FastAPI, Request, Depends, HTTPException, status
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from starlette.middleware.gzip import GZipMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
import os
import time
import logging
from contextlib import asynccontextmanager
from dotenv import load_dotenv

from .database import engine, SessionLocal
from .models import Base
from .routers import volunteers, organizers, events, admin, applications, auth, reviews, export
from .routers import admin_auth  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from .health import router as health_router
from .auth import get_telegram_user_flexible
from .admin_auth import AdminActivityMiddleware, require_admin_auth, optional_admin_auth  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from .monitoring import start_background_monitoring
from . import crud

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, os.getenv("LOG_LEVEL", "INFO")),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(os.getenv("LOG_FILE", "app.log")),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ Starting Volunteer Management System...")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Database tables created/verified")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        raise

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        await start_background_monitoring()
        logger.info("‚úÖ Background monitoring started")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Background monitoring failed to start: {e}")

    logger.info("‚úÖ Application startup completed")

    yield

    # Cleanup –ø—Ä–∏ shutdown
    logger.info("üõë Shutting down Volunteer Management System...")
    logger.info("‚úÖ Application shutdown completed")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Volunteer Management System",
    description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–º–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º–∏",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs" if os.getenv("ENVIRONMENT") == "development" else None,
    redoc_url="/redoc" if os.getenv("ENVIRONMENT") == "development" else None,
)


# ==============================================
# MIDDLEWARE
# ==============================================

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
class RequestLoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        start_time = time.time()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.info(
            f"üì® {request.method} {request.url.path} from {request.client.host if request.client else 'unknown'}")

        response = await call_next(request)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = time.time() - start_time
        logger.info(
            f"‚è±Ô∏è {request.method} {request.url.path} completed in {process_time:.3f}s with status {response.status_code}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        response.headers["X-Process-Time"] = str(process_time)

        return response


# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorHandlingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        try:
            response = await call_next(request)
            return response
        except Exception as e:
            logger.error(f"‚ùå Unhandled error in {request.method} {request.url.path}: {str(e)}")

            # –í development —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            if os.getenv("ENVIRONMENT") == "development":
                return JSONResponse(
                    status_code=500,
                    content={
                        "detail": f"Internal server error: {str(e)}",
                        "path": str(request.url.path),
                        "method": request.method
                    }
                )
            else:
                return JSONResponse(
                    status_code=500,
                    content={"detail": "Internal server error"}
                )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ middleware
app.add_middleware(GZipMiddleware, minimum_size=1000)
app.add_middleware(AdminActivityMiddleware)  # –ù–û–í–´–ô MIDDLEWARE
app.add_middleware(RequestLoggingMiddleware)
app.add_middleware(ErrorHandlingMiddleware)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
allowed_origins = os.getenv("CORS_ORIGINS", "").split(",") if os.getenv("CORS_ORIGINS") else ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã (—Ç–æ–ª—å–∫–æ –≤ production)
if os.getenv("ENVIRONMENT") == "production":
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=["*.ngrok-free.app", "localhost", "127.0.0.1"]
    )

# ==============================================
# –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ –ò –®–ê–ë–õ–û–ù–´
# ==============================================

app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

# ==============================================
# –†–û–£–¢–ï–†–´ API
# ==============================================

# Health checks (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
app.include_router(health_router, tags=["health"])

# –û—Å–Ω–æ–≤–Ω—ã–µ API —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(volunteers.router, prefix="/api/volunteers", tags=["volunteers"])
app.include_router(organizers.router, prefix="/api/organizers", tags=["organizers"])
app.include_router(events.router, prefix="/api/events", tags=["events"])
app.include_router(applications.router, prefix="/api/applications", tags=["applications"])
app.include_router(auth.router, prefix="/api/auth", tags=["auth"])
app.include_router(reviews.router, prefix="/api/reviews", tags=["reviews"])
app.include_router(export.router, prefix="/api/export", tags=["export"])
app.include_router(admin.router, prefix="/api/admin", tags=["admin"])

# –ù–û–í–´–ô –†–û–£–¢–ï–† –¥–ª—è –∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.include_router(admin_auth.router, prefix="/admin", tags=["admin-auth"])


# ==============================================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –†–û–õ–ï–ô
# ==============================================

async def check_user_role(request: Request, required_role: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
    try:
        auth_header = request.headers.get('authorization')
        if not auth_header:
            return False

        telegram_user = get_telegram_user_flexible(auth_header)
        db = SessionLocal()
        try:
            user = crud.get_user_by_telegram_id(db, telegram_user['id'])
            return user and user.role == required_role and user.is_active
        finally:
            db.close()
    except Exception as e:
        logger.error(f"Role check failed: {e}")
        return False


# ==============================================
# –û–°–ù–û–í–ù–´–ï –°–¢–†–ê–ù–ò–¶–´
# ==============================================

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
    return templates.TemplateResponse("index.html", {"request": request})


# ==============================================
# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø)
# ==============================================

@app.get("/admin/login", response_class=HTMLResponse)
async def admin_login_redirect(request: Request):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞"""
    return RedirectResponse(url="/admin/login", status_code=302)


@app.get("/admin/dashboard", response_class=HTMLResponse)
async def admin_dashboard(
    request: Request,
    admin_session: dict = Depends(require_admin_auth)
):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    return templates.TemplateResponse(
        "admin_dashboard_secure.html",
        {"request": request, "admin_session": admin_session}
    )


@app.get("/admin", response_class=HTMLResponse)
async def admin_root(request: Request):
    """–ö–æ—Ä–µ–Ω—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∞–¥–º–∏–Ω
    admin_session = optional_admin_auth(request)
    if admin_session:
        return RedirectResponse(url="/admin/dashboard", status_code=302)
    else:
        return RedirectResponse(url="/admin/login", status_code=302)


# ==============================================
# –°–¢–†–ê–ù–ò–¶–´ –í–û–õ–û–ù–¢–Å–†–ê
# ==============================================

@app.get("/volunteer/profile", response_class=HTMLResponse)
async def volunteer_profile_page(request: Request):
    """–ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"""
    return templates.TemplateResponse("volunteer_profile.html", {"request": request})


@app.get("/volunteer/events", response_class=HTMLResponse)
async def volunteer_events_page(request: Request):
    """–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"""
    return templates.TemplateResponse("volunteer_events.html", {"request": request})


@app.get("/volunteer/applications", response_class=HTMLResponse)
async def volunteer_applications_page(request: Request):
    """–ú–æ–∏ –∑–∞—è–≤–∫–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"""
    return templates.TemplateResponse("volunteer_applications.html", {"request": request})


@app.get("/volunteer/reviews", response_class=HTMLResponse)
async def volunteer_reviews_page(request: Request):
    """–û—Ç–∑—ã–≤—ã –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"""
    return templates.TemplateResponse("volunteer_reviews.html", {"request": request})


# ==============================================
# –°–¢–†–ê–ù–ò–¶–´ –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–ê
# ==============================================

@app.get("/organizer/profile", response_class=HTMLResponse)
async def organizer_profile_page(request: Request):
    """–ü—Ä–æ—Ñ–∏–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    return templates.TemplateResponse("organizer_profile.html", {"request": request})


@app.get("/organizer/create-event", response_class=HTMLResponse)
async def create_event_page(request: Request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    return templates.TemplateResponse("create_event.html", {"request": request})


@app.get("/organizer/events", response_class=HTMLResponse)
async def organizer_events_page(request: Request):
    """–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    return templates.TemplateResponse("organizer_events.html", {"request": request})


@app.get("/organizer/applications", response_class=HTMLResponse)
async def organizer_applications_page(request: Request):
    """–ó–∞—è–≤–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    return templates.TemplateResponse("organizer_applications.html", {"request": request})


@app.get("/organizer/reviews", response_class=HTMLResponse)
async def organizer_reviews_page(request: Request):
    """–û—Ç–∑—ã–≤—ã –æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞—Ö"""
    return templates.TemplateResponse("event_reviews.html", {"request": request})


@app.get("/organizer/manage", response_class=HTMLResponse)
async def event_management_page(request: Request):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º"""
    return templates.TemplateResponse("event_management.html", {"request": request})


@app.get("/organizer/edit", response_class=HTMLResponse)
async def edit_event_page(request: Request):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    return templates.TemplateResponse("edit_event_page.html", {"request": request})


# ==============================================
# –°–¢–†–ê–ù–ò–¶–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
# ==============================================

@app.get("/register/volunteer", response_class=HTMLResponse)
async def volunteer_registration_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"""
    return templates.TemplateResponse("register_volunteer.html", {"request": request})


@app.get("/register/organizer", response_class=HTMLResponse)
async def organizer_registration_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    return templates.TemplateResponse("register_organizer.html", {"request": request})


# ==============================================
# –°–¢–†–ê–ù–ò–¶–´ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
# ==============================================

@app.get("/event/{event_id}", response_class=HTMLResponse)
async def event_details_page(event_id: int, request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    return templates.TemplateResponse(
        "event_details.html",
        {"request": request, "event_id": event_id}
    )


# ==============================================
# –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –ò –†–ï–î–ò–†–ï–ö–¢–´
# ==============================================

@app.get("/volunteer", response_class=HTMLResponse)
async def volunteer_redirect(request: Request):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return templates.TemplateResponse("volunteer_redirect.html", {"request": request})


@app.get("/organizer", response_class=HTMLResponse)
async def organizer_redirect(request: Request):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return templates.TemplateResponse("organizer_redirect.html", {"request": request})


# ==============================================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# ==============================================

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–æ–∫"""
    return templates.TemplateResponse(
        "error_404.html",
        {"request": request},
        status_code=404
    )


@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"Internal server error: {exc}")
    return templates.TemplateResponse(
        "error_500.html",
        {"request": request},
        status_code=500
    )


@app.exception_handler(403)
async def forbidden_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 403 –æ—à–∏–±–æ–∫"""
    return templates.TemplateResponse(
        "error_403.html",
        {"request": request},
        status_code=403
    )


# ==============================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï ENDPOINTS
# ==============================================

@app.get("/api/version")
async def get_version():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {
        "version": "1.0.0",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "build_time": "2024-01-01T00:00:00Z",
        "admin_auth": "enabled"  # –ù–û–í–û–ï –ü–û–õ–ï
    }


@app.get("/robots.txt", response_class=HTMLResponse)
async def robots_txt():
    """Robots.txt –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–æ–±–æ—Ç–æ–≤"""
    return """User-agent: *
Disallow: /admin
Disallow: /api
Allow: /
"""


@app.get("/sitemap.xml", response_class=HTMLResponse)
async def sitemap_xml(request: Request):
    """Sitemap –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
    base_url = str(request.base_url).rstrip('/')

    return f"""<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>{base_url}/</loc>
        <changefreq>daily</changefreq>
        <priority>1.0</priority>
    </url>
    <url>
        <loc>{base_url}/register/volunteer</loc>
        <changefreq>weekly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>{base_url}/register/organizer</loc>
        <changefreq>weekly</changefreq>
        <priority>0.8</priority>
    </url>
</urlset>
"""


# ==============================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==============================================

if __name__ == "__main__":
    import uvicorn

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    config = {
        "app": "app.main:app",
        "host": "0.0.0.0",
        "port": int(os.getenv("PORT", 8000)),
        "reload": os.getenv("ENVIRONMENT") == "development",
        "workers": int(os.getenv("WORKERS", 1)) if os.getenv("ENVIRONMENT") != "development" else 1,
        "access_log": True,
        "log_level": os.getenv("LOG_LEVEL", "info").lower(),
    }

    logger.info(f"üöÄ Starting server with config: {config}")
    uvicorn.run(**config)