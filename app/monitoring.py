import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import os

logger = logging.getLogger(__name__)


class SystemMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.alerts = []
        self.last_check = datetime.utcnow()
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        while True:
            try:
                await self.perform_health_checks()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"Monitoring error: {e}")
                await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def perform_health_checks(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        from .database import SessionLocal
        from . import models

        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            recent_registrations = db.query(models.User).filter(
                models.User.created_at > datetime.utcnow() - timedelta(hours=24)
            ).count()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–∞—è–≤–æ–∫
            old_pending_applications = db.query(models.Application).filter(
                models.Application.status == "pending",
                models.Application.applied_at < datetime.utcnow() - timedelta(days=7)
            ).count()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            import psutil
            cpu_percent = psutil.cpu_percent()
            memory_percent = psutil.virtual_memory().percent
            disk_percent = psutil.disk_usage('/').percent

            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            alerts = []

            if cpu_percent > 85:
                alerts.append(f"High CPU usage: {cpu_percent}%")

            if memory_percent > 90:
                alerts.append(f"High memory usage: {memory_percent}%")

            if disk_percent > 90:
                alerts.append(f"High disk usage: {disk_percent}%")

            if old_pending_applications > 10:
                alerts.append(f"Too many old pending applications: {old_pending_applications}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if alerts and self.should_send_alert():
                await self.send_alert_notification(alerts)

            logger.info(
                f"Health check completed. CPU: {cpu_percent}%, Memory: {memory_percent}%, Disk: {disk_percent}%")

        except Exception as e:
            logger.error(f"Health check failed: {e}")
        finally:
            db.close()

    def should_send_alert(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (throttling)"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —á–∞—Å
        if not self.alerts or datetime.utcnow() - self.last_check > timedelta(hours=1):
            self.last_check = datetime.utcnow()
            return True
        return False

    async def send_alert_notification(self, alerts: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–ª–µ—Ä—Ç–∞—Ö"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∞–¥–º–∏–Ω–∞–º
            await self.send_telegram_alert(alerts)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            await self.send_email_alert(alerts)

        except Exception as e:
            logger.error(f"Failed to send alert: {e}")

    async def send_telegram_alert(self, alerts: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        try:
            from .bot import bot
            admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "123456789").split(",")

            alert_text = "üö® SYSTEM ALERT üö®\n\n" + "\n".join(f"‚Ä¢ {alert}" for alert in alerts)
            alert_text += f"\n\n‚è∞ Time: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"

            for admin_id in admin_ids:
                try:
                    await bot.send_message(int(admin_id.strip()), alert_text)
                except Exception as e:
                    logger.error(f"Failed to send Telegram alert to {admin_id}: {e}")

        except Exception as e:
            logger.error(f"Telegram alert failed: {e}")

    async def send_email_alert(self, alerts: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ email"""
        smtp_host = os.getenv("SMTP_HOST")
        smtp_user = os.getenv("SMTP_USER")
        smtp_password = os.getenv("SMTP_PASSWORD")

        if not all([smtp_host, smtp_user, smtp_password]):
            return  # Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

        try:
            msg = MIMEMultipart()
            msg['From'] = smtp_user
            msg['To'] = smtp_user  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
            msg['Subject'] = "Volunteer System Alert"

            body = "System Alert:\n\n" + "\n".join(f"- {alert}" for alert in alerts)
            body += f"\n\nTime: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"

            msg.attach(MIMEText(body, 'plain'))

            server = smtplib.SMTP(smtp_host, int(os.getenv("SMTP_PORT", 587)))
            server.starttls()
            server.login(smtp_user, smtp_password)
            text = msg.as_string()
            server.sendmail(smtp_user, smtp_user, text)
            server.quit()

            logger.info("Email alert sent successfully")

        except Exception as e:
            logger.error(f"Email alert failed: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
system_monitor = SystemMonitor()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def start_background_monitoring():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    asyncio.create_task(system_monitor.start_monitoring())
