from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from pydantic import BaseModel

from .. import crud, models, schemas
from ..database import get_db
from ..auth import get_telegram_user_flexible

router = APIRouter()


class EventStatusUpdate(BaseModel):
    status: str


@router.get("/", response_model=List[schemas.EventResponse])
def list_events(
        skip: int = 0,
        limit: int = 100,
        city: Optional[str] = Query(None),
        organizer_id: Optional[int] = Query(None),
        db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    print(f"üìã Filtering events with organizer_id: {organizer_id}")

    query = db.query(models.Event)

    # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
    if city:
        query = query.filter(models.Event.city.ilike(f"%{city}%"))

    # –§–∏–ª—å—Ç—Ä –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π)
    if organizer_id:
        print(f"üîç Looking for organizer with ID: {organizer_id}")

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±–æ–ª—å—à–æ–π ID, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id
        if organizer_id > 1000000000:
            print(f"üì± Treating {organizer_id} as telegram_id")
            db_user = crud.get_user_by_telegram_id(db, organizer_id)
            if db_user:
                print(f"‚úÖ Found user with internal ID: {db_user.id}")
                organizer_id = db_user.id
            else:
                print(f"‚ùå User with telegram_id {organizer_id} not found")
                return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

        query = query.filter(models.Event.organizer_id == organizer_id)
        print(f"üéØ Filtering by organizer_id: {organizer_id}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if not organizer_id:
        query = query.filter(models.Event.status == "active")

    events = query.order_by(models.Event.created_at.desc()).offset(skip).limit(limit).all()
    print(f"üìä Found {len(events)} events")

    return events



@router.post("/", response_model=schemas.EventResponse)
def create_event(
        event: schemas.EventCreate,
        organizer_id: Optional[int] = Query(None),
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    print(f"üéØ Creating event for user: {telegram_user}")

    # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ –ë–î
    db_user = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not db_user:
        raise HTTPException(status_code=404, detail="User not registered")

    if db_user.role != "organizer":
        raise HTTPException(status_code=403, detail="Only organizers can create events")

    return crud.create_event(db, event, db_user.id)

@router.get("/{event_id}", response_model=schemas.EventResponse)
def get_event(event_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    db_event = db.query(models.Event).filter(models.Event.id == event_id).first()
    if not db_event:
        raise HTTPException(status_code=404, detail="Event not found")
    return db_event


@router.put("/{event_id}/status")
def update_event_status(
        event_id: int,
        status_update: EventStatusUpdate,
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    print(f"üîÑ Updating event {event_id} status to {status_update.status}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    db_user = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not db_user:
        raise HTTPException(status_code=404, detail="User not found")

    event = db.query(models.Event).filter(models.Event.id == event_id).first()
    if not event:
        raise HTTPException(status_code=404, detail="Event not found")

    if event.organizer_id != db_user.id:
        raise HTTPException(status_code=403, detail="Access denied")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
    valid_statuses = ["active", "completed", "cancelled"]
    if status_update.status not in valid_statuses:
        raise HTTPException(status_code=400, detail=f"Invalid status. Must be one of: {valid_statuses}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    old_status = event.status
    event.status = status_update.status
    db.commit()
    db.refresh(event)

    print(f"‚úÖ Event {event_id} status updated from {old_status} to {status_update.status}")

    return {
        "message": f"Event status updated to {status_update.status}",
        "event": event
    }


@router.put("/{event_id}", response_model=schemas.EventResponse)
def update_event(
        event_id: int,
        event_data: schemas.EventUpdate,
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    from datetime import datetime  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

    print(f"‚úèÔ∏è Updating event {event_id} by user {telegram_user['id']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    organizer = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not organizer:
        raise HTTPException(status_code=404, detail="Organizer not found")

    event = crud.get_event_by_id(db, event_id)
    if not event:
        raise HTTPException(status_code=404, detail="Event not found")

    if event.organizer_id != organizer.id:
        raise HTTPException(status_code=403, detail="Access denied")

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        update_data = event_data.dict(exclude_unset=True)

        for field, value in update_data.items():
            if hasattr(event, field) and value is not None:
                setattr(event, field, value)

        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
        event.updated_at = datetime.utcnow()

        db.commit()
        db.refresh(event)

        print(f"‚úÖ Event {event_id} updated successfully")
        return event

    except Exception as e:
        print(f"‚ùå Error updating event: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to update event: {str(e)}")


@router.get("/{event_id}/applications")
def get_event_applications(
        event_id: int,
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    db_user = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not db_user:
        raise HTTPException(status_code=404, detail="User not found")

    event = db.query(models.Event).filter(models.Event.id == event_id).first()
    if not event or event.organizer_id != db_user.id:
        raise HTTPException(status_code=403, detail="Access denied")

    applications = db.query(models.Application).filter(
        models.Application.event_id == event_id
    ).all()

    return applications


@router.delete("/{event_id}")
def delete_event(
        event_id: int,
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)"""
    print(f"üóëÔ∏è Deleting event {event_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    db_user = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not db_user:
        raise HTTPException(status_code=404, detail="User not found")

    event = db.query(models.Event).filter(models.Event.id == event_id).first()
    if not event:
        raise HTTPException(status_code=404, detail="Event not found")

    if event.organizer_id != db_user.id:
        raise HTTPException(status_code=403, detail="Access denied")

    try:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∑—ã–≤—ã
        db.query(models.Review).filter(models.Review.event_id == event_id).delete()

        # –ó–∞—Ç–µ–º –∑–∞—è–≤–∫–∏
        db.query(models.Application).filter(models.Application.event_id == event_id).delete()

        # –ò –Ω–∞–∫–æ–Ω–µ—Ü —Å–∞–º–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        db.delete(event)
        db.commit()

        print(f"‚úÖ Event {event_id} deleted successfully")
        return {"message": "Event deleted successfully", "event_id": event_id}

    except Exception as e:
        print(f"‚ùå Error deleting event: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to delete event: {str(e)}")