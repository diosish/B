from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional

from .. import crud, models, schemas
from ..database import get_db
from ..auth import get_telegram_user_flexible
from ..bot import notify_application_status

router = APIRouter()


@router.get("/event/{event_id}", response_model=List[schemas.ApplicationWithVolunteer])
def get_event_applications(
        event_id: int,
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)"""

    print(f"üìã Getting applications for event {event_id} by user {telegram_user['id']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    organizer = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not organizer:
        raise HTTPException(status_code=404, detail="Organizer not found")

    event = crud.get_event_by_id(db, event_id)
    if not event or event.organizer_id != organizer.id:
        raise HTTPException(status_code=403, detail="Access denied")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞—Ö
    applications = db.query(models.Application).filter(
        models.Application.event_id == event_id
    ).all()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞—Ö
    result = []
    for app in applications:
        volunteer = crud.get_user_by_id(db, app.volunteer_id)
        app_data = {
            "id": app.id,
            "event_id": app.event_id,
            "volunteer_id": app.volunteer_id,
            "status": app.status,
            "applied_at": app.applied_at,
            "volunteer": volunteer
        }
        result.append(app_data)

    return result


@router.put("/{application_id}/status")
async def update_application_status(
        application_id: int,
        status: str = Query(..., regex="^(approved|rejected|pending)$"),
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""

    print(f"üîÑ Updating application {application_id} status to {status} by user {telegram_user['id']}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    organizer = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not organizer:
        raise HTTPException(status_code=404, detail="Organizer not found")

    application = db.query(models.Application).filter(
        models.Application.id == application_id
    ).first()

    if not application:
        raise HTTPException(status_code=404, detail="Application not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É
    event = crud.get_event_by_id(db, application.event_id)
    if not event:
        raise HTTPException(status_code=404, detail="Event not found")

    if event.organizer_id != organizer.id:
        raise HTTPException(status_code=403, detail="Access denied")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    old_status = application.status
    application.status = status
    db.commit()
    db.refresh(application)

    print(f"‚úÖ Application {application_id} status updated from {old_status} to {status}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä—É
    if old_status != status and status in ["approved", "rejected"]:
        volunteer = crud.get_user_by_id(db, application.volunteer_id)
        if volunteer:
            try:
                await notify_application_status(
                    volunteer.telegram_id,
                    event.title,
                    status
                )
                print(f"üì± Notification sent to volunteer {volunteer.telegram_id}")
            except Exception as e:
                print(f"‚ùå Failed to send notification: {e}")

    return {
        "message": f"Application status updated to {status}",
        "application": application
    }


@router.get("/volunteer/{telegram_id}", response_model=List[schemas.ApplicationWithEvent])
def get_volunteer_applications(
        telegram_id: int,
        db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö"""

    volunteer = crud.get_user_by_telegram_id(db, telegram_id)
    if not volunteer:
        raise HTTPException(status_code=404, detail="Volunteer not found")

    applications = crud.get_applications_by_volunteer(db, volunteer.id)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
    result = []
    for app in applications:
        event = crud.get_event_by_id(db, app.event_id)
        app_data = {
            "id": app.id,
            "event_id": app.event_id,
            "volunteer_id": app.volunteer_id,
            "status": app.status,
            "applied_at": app.applied_at,
            "event": event
        }
        result.append(app_data)

    return result


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/my", response_model=List[schemas.ApplicationWithEvent])
def get_my_applications(
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return get_volunteer_applications(telegram_user['id'], db)

@router.delete("/{application_id}")
async def withdraw_application(
        application_id: int,
        db: Session = Depends(get_db),
        telegram_user: dict = Depends(get_telegram_user_flexible)
):
    """–û—Ç–∑—ã–≤ –∑–∞—è–≤–∫–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"""

    print(f"üîÑ Withdrawing application {application_id} by user {telegram_user['id']}")

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞
    volunteer = crud.get_user_by_telegram_id(db, telegram_user['id'])
    if not volunteer:
        raise HTTPException(status_code=404, detail="Volunteer not found")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    application = db.query(models.Application).filter(
        models.Application.id == application_id
    ).first()

    if not application:
        raise HTTPException(status_code=404, detail="Application not found")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞—è–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if application.volunteer_id != volunteer.id:
        raise HTTPException(status_code=403, detail="Access denied")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ –æ—Ç–æ–∑–≤–∞—Ç—å (—Ç–æ–ª—å–∫–æ pending –∑–∞—è–≤–∫–∏)
    if application.status != "pending":
        raise HTTPException(
            status_code=400,
            detail=f"Cannot withdraw application with status: {application.status}"
        )

    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
        db.delete(application)
        db.commit()

        print(f"‚úÖ Application {application_id} withdrawn successfully")

        return {
            "message": "Application withdrawn successfully",
            "application_id": application_id
        }

    except Exception as e:
        print(f"‚ùå Error withdrawing application: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail="Failed to withdraw application")