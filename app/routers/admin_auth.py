# app/routers/admin_auth.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
from fastapi import APIRouter, Depends, HTTPException, Request, Response
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import Optional

from ..admin_auth import admin_auth, require_admin_auth, optional_admin_auth

router = APIRouter()
templates = Jinja2Templates(directory="app/templates")


class AdminLoginRequest(BaseModel):
    login: str
    password: str
    bot_token: str


class AdminLoginResponse(BaseModel):
    success: bool
    session_id: str
    message: str


@router.get("/login", response_class=HTMLResponse)
async def admin_login_page(request: Request, token: Optional[str] = None):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print(f"üîê Admin login page requested with token: {token is not None}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    admin_session = optional_admin_auth(request)
    if admin_session:
        print("‚úÖ Admin already authenticated, redirecting to dashboard")
        return RedirectResponse(url="/admin/dashboard", status_code=302)

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—à–∏–±–∫–æ–π
    if not token:
        print("‚ùå No token provided")
        return templates.TemplateResponse(
            "admin_login.html",
            {
                "request": request,
                "error": "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin –≤ –±–æ—Ç–µ."
            }
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏–∑ –±–æ—Ç–∞
    if not admin_auth.validate_bot_token(token):
        print(f"‚ùå Invalid or expired token: {token}")
        return templates.TemplateResponse(
            "admin_login.html",
            {
                "request": request,
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ /admin –≤ –±–æ—Ç–µ."
            }
        )

    print("‚úÖ Valid token, showing login form")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    return templates.TemplateResponse(
        "admin_login.html",
        {"request": request, "token": token}
    )


@router.post("/auth/login", response_model=AdminLoginResponse)
async def admin_login(login_data: AdminLoginRequest, response: Response):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print(f"üîê Admin login attempt: {login_data.login}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–æ—Ç–∞
    if not admin_auth.validate_bot_token(login_data.bot_token):
        print(f"‚ùå Invalid bot token")
        raise HTTPException(
            status_code=403,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    if not admin_auth.verify_credentials(login_data.login, login_data.password):
        print(f"‚ùå Invalid credentials for: {login_data.login}")
        raise HTTPException(
            status_code=401,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = admin_auth.create_session()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
    response.set_cookie(
        key="admin_session",
        value=session_id,
        max_age=28800,  # 8 —á–∞—Å–æ–≤
        httponly=True,
        secure=True,
        samesite="strict",
        path="/"
    )

    print(f"‚úÖ Admin login successful: {login_data.login}")
    print(f"üìù Created session: {session_id[:8]}...")

    return AdminLoginResponse(
        success=True,
        session_id=session_id,
        message="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
    )


@router.post("/auth/logout")
async def admin_logout(
        request: Request,
        response: Response,
        admin_session: dict = Depends(require_admin_auth)
):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    session_id = admin_session["session_id"]

    # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
    admin_auth.invalidate_session(session_id)

    # –£–¥–∞–ª—è–µ–º cookie
    response.delete_cookie("admin_session", path="/")

    print(f"üö™ Admin logout: {session_id[:8]}...")

    return {"success": True, "message": "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"}


@router.get("/auth/check")
async def admin_auth_check(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    admin_session = optional_admin_auth(request)

    if admin_session:
        return {
            "authenticated": True,
            "session_id": admin_session["session_id"][:8] + "...",
            "role": "admin"
        }
    else:
        return {
            "authenticated": False,
            "message": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        }


@router.get("/auth/extend")
async def admin_extend_session(admin_session: dict = Depends(require_admin_auth)):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    session_id = admin_session["session_id"]
    admin_auth.extend_session(session_id)

    return {
        "success": True,
        "message": "–°–µ—Å—Å–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∞",
        "session_id": session_id[:8] + "..."
    }


@router.get("/auth/sessions")
async def admin_get_sessions(admin_session: dict = Depends(require_admin_auth)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏—è—Ö (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    from ..admin_auth import get_admin_stats

    stats = get_admin_stats()

    return {
        "stats": stats,
        "current_session": admin_session["session_id"][:8] + "..."
    }