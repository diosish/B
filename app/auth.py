# app/auth.py - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import hashlib
import hmac
import json
from urllib.parse import parse_qsl, unquote
from fastapi import HTTPException, Header
from typing import Optional
import os
from datetime import datetime, timedelta


def verify_telegram_auth(init_data: str, allow_test_mode: bool = True) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""

    # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if allow_test_mode and (
            os.getenv("ENVIRONMENT") == "development" or
            init_data == "test_data" or
            not os.getenv("BOT_TOKEN")
    ):
        print("‚ö†Ô∏è Development mode: using test user data")
        return {
            'id': 123456789,
            'first_name': 'Test',
            'last_name': 'User',
            'username': 'testuser',
            'language_code': 'ru',
            'is_premium': False
        }

    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ init_data
        parsed_data = dict(parse_qsl(init_data))

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ hash
        hash_value = parsed_data.pop('hash', None)
        if not hash_value:
            raise ValueError("Hash not found in init_data")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (auth_date –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        auth_date = parsed_data.get('auth_date')
        if auth_date:
            auth_timestamp = int(auth_date)
            current_timestamp = int(datetime.utcnow().timestamp())
            if current_timestamp - auth_timestamp > 86400:  # 24 —á–∞—Å–∞
                raise ValueError("Auth data is too old")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])

        # –°–æ–∑–¥–∞–Ω–∏–µ secret key
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            raise ValueError("BOT_TOKEN not configured")

        secret_key = hmac.new(
            "WebAppData".encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()

        if calculated_hash != hash_value:
            raise ValueError("Invalid signature - authentication failed")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = parsed_data.get('user')
        if not user_data:
            raise ValueError("User data not found in init_data")

        user_info = json.loads(unquote(user_data))

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not user_info.get('id'):
            raise ValueError("User ID not found")

        if not isinstance(user_info['id'], int):
            raise ValueError("Invalid user ID format")

        return {
            'id': user_info.get('id'),
            'first_name': user_info.get('first_name', ''),
            'last_name': user_info.get('last_name', ''),
            'username': user_info.get('username', ''),
            'language_code': user_info.get('language_code', 'ru'),
            'is_premium': user_info.get('is_premium', False),
            'auth_date': auth_date
        }

    except Exception as e:
        print(f"‚ùå Telegram auth error: {e}")

        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if allow_test_mode and os.getenv("ENVIRONMENT") == "development":
            print("‚ö†Ô∏è Auth failed, but using test data in development mode")
            return {
                'id': 123456789,
                'first_name': 'Test',
                'last_name': 'User',
                'username': 'testuser',
                'language_code': 'ru',
                'is_premium': False
            }

        raise HTTPException(
            status_code=401,
            detail=f"Telegram authentication failed: {str(e)}"
        )


def get_telegram_user_flexible(authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    if not authorization:
        raise HTTPException(
            status_code=401,
            detail="Authorization header required"
        )

    return verify_telegram_auth(authorization, allow_test_mode=True)


def get_telegram_user_strict(authorization: Optional[str] = Header(None)):
    """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)"""
    if not authorization:
        raise HTTPException(
            status_code=401,
            detail="Authorization header required"
        )

    return verify_telegram_auth(authorization, allow_test_mode=False)


def validate_admin_access(telegram_user: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin_ids = [
        123456789,  # –¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω
        # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–µ telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    env_admin_ids = os.getenv("ADMIN_TELEGRAM_IDS", "")
    if env_admin_ids:
        try:
            env_ids = [int(id_str.strip()) for id_str in env_admin_ids.split(",") if id_str.strip()]
            admin_ids.extend(env_ids)
        except ValueError:
            print("‚ö†Ô∏è Invalid ADMIN_TELEGRAM_IDS format in environment")

    return telegram_user['id'] in admin_ids


def generate_user_token(user_id: int, expires_hours: int = 24) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
    import secrets
    import base64

    expire_time = datetime.utcnow() + timedelta(hours=expires_hours)
    token_data = {
        'user_id': user_id,
        'expires': expire_time.timestamp(),
        'nonce': secrets.token_hex(16)
    }

    # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏)
    token_json = json.dumps(token_data)
    token_bytes = token_json.encode('utf-8')
    token_b64 = base64.b64encode(token_bytes).decode('utf-8')

    return token_b64


def validate_user_token(token: str) -> Optional[dict]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
    try:
        import base64

        token_bytes = base64.b64decode(token.encode('utf-8'))
        token_json = token_bytes.decode('utf-8')
        token_data = json.loads(token_json)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.utcnow().timestamp() > token_data['expires']:
            return None

        return token_data

    except Exception as e:
        print(f"‚ùå Token validation error: {e}")
        return None


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AuthLoggerMiddleware:
    def __init__(self, app):
        self.app = app

    async def __call__(self, scope, receive, send):
        if scope["type"] == "http":
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            headers = dict(scope.get("headers", []))
            auth_header = headers.get(b"authorization", b"").decode()

            if auth_header and auth_header != "test_data":
                print(f"üîê Auth attempt from {scope.get('client', ['unknown'])[0]}")

        await self.app(scope, receive, send)


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
def require_role(required_role: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ò—â–µ–º telegram_user –≤ kwargs
            telegram_user = kwargs.get('telegram_user')
            if not telegram_user:
                raise HTTPException(status_code=401, detail="Authentication required")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –ë–î
            # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            return await func(*args, **kwargs)

        return wrapper

    return decorator


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
class SessionManager:
    def __init__(self):
        self.sessions = {}  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î

    def create_session(self, user_id: int) -> str:
        import secrets
        session_id = secrets.token_urlsafe(32)
        self.sessions[session_id] = {
            'user_id': user_id,
            'created_at': datetime.utcnow(),
            'last_activity': datetime.utcnow()
        }
        return session_id

    def get_session(self, session_id: str) -> Optional[dict]:
        session = self.sessions.get(session_id)
        if session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            session['last_activity'] = datetime.utcnow()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (24 —á–∞—Å–∞)
            if datetime.utcnow() - session['created_at'] > timedelta(hours=24):
                self.sessions.pop(session_id, None)
                return None

        return session

    def invalidate_session(self, session_id: str):
        self.sessions.pop(session_id, None)

    def cleanup_expired_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        expired_sessions = []
        for session_id, session_data in self.sessions.items():
            if datetime.utcnow() - session_data['created_at'] > timedelta(hours=24):
                expired_sessions.append(session_id)

        for session_id in expired_sessions:
            self.sessions.pop(session_id, None)

        print(f"üßπ Cleaned up {len(expired_sessions)} expired sessions")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
session_manager = SessionManager()