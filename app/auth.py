import hashlib
import hmac
import json
from urllib.parse import parse_qsl, unquote
from fastapi import HTTPException, Header
from typing import Optional
import os


def extract_telegram_user_from_init_data(init_data: str) -> Optional[dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ init_data –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏"""
    try:
        if not init_data or init_data == 'test_data':
            return None

        parsed_data = dict(parse_qsl(init_data))
        user_data = parsed_data.get('user')

        if not user_data:
            return None

        user_info = json.loads(unquote(user_data))

        return {
            'id': user_info.get('id'),
            'first_name': user_info.get('first_name', ''),
            'last_name': user_info.get('last_name', ''),
            'username': user_info.get('username', ''),
            'language_code': user_info.get('language_code', 'ru'),
            'is_premium': user_info.get('is_premium', False)
        }
    except Exception as e:
        print(f"Error extracting user data: {e}")
        return None


def verify_telegram_auth(init_data: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö Telegram WebApp"""
    try:
        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —É–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if os.getenv("ENVIRONMENT") == "development":
            print("üîß Development mode: simplified auth")

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_data = extract_telegram_user_from_init_data(init_data)
            if user_data:
                print(f"‚úÖ Real user data extracted: {user_data['id']}")
                return user_data

            # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("‚ö†Ô∏è Using test user data")
            return {
                'id': 123456789,
                'first_name': 'Test',
                'last_name': 'User',
                'username': 'testuser',
                'language_code': 'ru',
                'is_premium': False
            }

        # –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        parsed_data = dict(parse_qsl(init_data))
        hash_value = parsed_data.pop('hash', None)

        if not hash_value:
            raise ValueError("Hash not found")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])

        # –°–æ–∑–¥–∞–Ω–∏–µ secret key
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            raise ValueError("BOT_TOKEN not set")

        secret_key = hmac.new(
            "WebAppData".encode(),
            bot_token.encode(),
            hashlib.sha256
        ).digest()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()

        if calculated_hash != hash_value:
            raise ValueError("Invalid signature")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = parsed_data.get('user')
        if not user_data:
            raise ValueError("User data not found")

        user_info = json.loads(unquote(user_data))

        return {
            'id': user_info.get('id'),
            'first_name': user_info.get('first_name', ''),
            'last_name': user_info.get('last_name', ''),
            'username': user_info.get('username', ''),
            'language_code': user_info.get('language_code', 'ru'),
            'is_premium': user_info.get('is_premium', False)
        }

    except Exception as e:
        print(f"‚ùå Auth error: {e}")

        # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if os.getenv("ENVIRONMENT") == "development":
            print("üîÑ Fallback to test user")
            return {
                'id': 123456789,
                'first_name': 'Test',
                'last_name': 'User',
                'username': 'testuser',
                'language_code': 'ru',
                'is_premium': False
            }

        raise HTTPException(status_code=401, detail=f"Invalid auth data: {str(e)}")


def get_telegram_user(authorization: Optional[str] = Header(None)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîç Authorization header: {authorization is not None}")

    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if os.getenv("ENVIRONMENT") == "development":
        if authorization and authorization != 'test_data':
            try:
                user = verify_telegram_auth(authorization)
                print(f"‚úÖ Authenticated user: {user['id']} ({user['first_name']})")
                return user
            except Exception as e:
                print(f"‚ö†Ô∏è Auth failed, using test user: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = {
            'id': 123456789,
            'first_name': 'Test',
            'last_name': 'User',
            'username': 'testuser',
            'language_code': 'ru',
            'is_premium': False
        }
        print(f"üß™ Using test user: {test_user['id']}")
        return test_user

    # –ü—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º - —Ç—Ä–µ–±—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header required")

    return verify_telegram_auth(authorization)


def get_telegram_user_flexible(authorization: Optional[str] = Header(None)):
    """–ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        return get_telegram_user(authorization)
    except HTTPException:
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üîÑ Auth failed, using fallback test user")
        return {
            'id': 123456789,
            'first_name': 'Test',
            'last_name': 'User',
            'username': 'testuser',
            'language_code': 'ru',
            'is_premium': False
        }