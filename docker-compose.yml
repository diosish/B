version: '3.8'

services:
  # ==============================================
  # –ë–ê–ó–ê –î–ê–ù–ù–´–• POSTGRESQL
  # ==============================================
  db:
    image: postgres:15-alpine
    container_name: volunteer_db
    environment:
      POSTGRES_DB: volunteer_db
      POSTGRES_USER: volunteer_user
      POSTGRES_PASSWORD: your_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U volunteer_user -d volunteer_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  # ==============================================
  # REDIS –î–õ–Ø –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø –ò –°–ï–°–°–ò–ô
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: volunteer_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # ==============================================
  # –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï FASTAPI
  # ==============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: volunteer_app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      ENVIRONMENT: production
      DATABASE_URL: postgresql://volunteer_user:your_password@db:5432/volunteer_db
      REDIS_URL: redis://redis:6379/0

      # Telegram
      BOT_TOKEN: 7704108290:AAE9kFQS0H-HhnY8EYGJsvBrdzAr0f9wNqw
      WEBAPP_URL: https://013b-146-70-139-6.ngrok-free.app/

      # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
      SECRET_KEY: your_super_secret_key_change_this_in_production_2024!
      ADMIN_TELEGRAM_IDS: "123456789"

      # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      WORKERS: 4
      MAX_CONNECTIONS: 100
      REQUEST_TIMEOUT: 30

      # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      LOG_LEVEL: INFO

    volumes:
      - ./logs:/app/logs
      - upload_data:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network
    command: >
      sh -c "
        echo 'üöÄ Starting application...' &&
        echo '‚è≥ Waiting for database...' &&
        sleep 10 &&
        echo 'üì¶ Running migrations...' &&
        alembic upgrade head &&
        echo 'üéØ Starting FastAPI server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4 --access-log
      "

  # ==============================================
  # TELEGRAM BOT
  # ==============================================
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: volunteer_bot
    depends_on:
      app:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      ENVIRONMENT: production
      DATABASE_URL: postgresql://volunteer_user:your_password@db:5432/volunteer_db
      BOT_TOKEN: 7704108290:AAE9kFQS0H-HhnY8EYGJsvBrdzAr0f9wNqw
      WEBAPP_URL: https://013b-146-70-139-6.ngrok-free.app/
      LOG_LEVEL: INFO
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    command: >
      sh -c "
        echo 'ü§ñ Starting Telegram bot...' &&
        sleep 20 &&
        python run_bot.py
      "

  # ==============================================
  # NGINX REVERSE PROXY (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  # ==============================================
  nginx:
    image: nginx:alpine
    container_name: volunteer_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network

  # ==============================================
  # –ú–û–ù–ò–¢–û–†–ò–ù–ì (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  # ==============================================
  grafana:
    image: grafana/grafana:latest
    container_name: volunteer_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: volunteer_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - monitoring

# ==============================================
# VOLUMES
# ==============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  upload_data:
    driver: local

# ==============================================
# NETWORKS
# ==============================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16